<!DOCTYPE html>
<html>
<head>
<title>Bouncing Balls</title>
<style>
  body {
    margin: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    font-family: sans-serif;
  }
  canvas { display: block; }
  .controls {
    display: flex;
    gap: 10px;
    margin-top: 10px;
    align-items: center;
  }
  .controls label {
    margin-bottom: 0;
  }
  .fancy-button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #4CAF50;
    color: white;
    font-size: 16px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
  }
  .fancy-button:hover {
    background-color: #367c39;
    box-shadow: 0 3px 7px rgba(0,0,0,0.3);
  }
  .fancy-button:active {
    background-color: #2b5e2e;
    box-shadow: 0 1px 2px rgba(0,0,0,0.2);
  }
  .stop {
    background-color: #f44336;
  }
  .stop:hover {
    background-color: #d32f2f;
  }
  .stop:active {
    background-color: #c62828;
  }
  .reset {
    background-color: #2196F3;
  }
  .reset:hover {
    background-color: #1976D2;
  }
  .reset:active {
    background-color: #1565C0;
  }
</style>
</head>
<body>
<canvas id="myCanvas"></canvas>
<div class="controls">
  <label for="sizeInput">Circle Size:</label>
  <input type="number" id="sizeInput" value="20" min="10" max="100">
  <label for="speedInput">Speed:</label>
  <input type="number" id="speedInput" value="5" min="1" max="20">
  <label for="ballCountInput">Ball Count:</label>
  <input type="number" id="ballCountInput" value="1" min="1" max="10">
  <button id="stopPlayButton" class="fancy-button stop">Stop</button>
  <button id="resetButton" class="fancy-button reset">Reset</button>
</div>
<script>
  const canvas = document.getElementById("myCanvas");
  const ctx = canvas.getContext("2d");
  const N = 500;
  canvas.width = N;
  canvas.height = N;

  let ballCount = parseInt(document.getElementById("ballCountInput").value, 10);
  let balls = [];
  let animationRunning = true;
  let animationFrameId;

  function createBalls(count) {
    balls = [];
    for (let i = 0; i < count; i++) {
      balls.push({
        x: N / 2,
        y: N / 2,
        radius: parseInt(document.getElementById("sizeInput").value, 10),
        color: `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`,
        speedX: (Math.random() - 0.5) * parseInt(document.getElementById("speedInput").value, 10) * 2,
        speedY: (Math.random() - 0.5) * parseInt(document.getElementById("speedInput").value, 10) * 2,
      });
    }
  }

  function drawCircle(ball) {
    ctx.beginPath();
    ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
    ctx.fillStyle = ball.color;
    ctx.fill();
    ctx.closePath();
  }

  function collide(ball1, ball2) {
    const dx = ball2.x - ball1.x;
    const dy = ball2.y - ball1.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance < ball1.radius + ball2.radius) {
      // Calculate the collision angle
      const collisionAngle = Math.atan2(dy, dx);

      // Calculate the velocities of the balls after collision
      const v1 = Math.sqrt(ball1.speedX * ball1.speedX + ball1.speedY * ball1.speedY);
      const v2 = Math.sqrt(ball2.speedX * ball2.speedX + ball2.speedY * ball2.speedY);

      // Calculate the angles of the velocities
      const angle1 = Math.atan2(ball1.speedY, ball1.speedX);
      const angle2 = Math.atan2(ball2.speedY, ball2.speedX);

      // Calculate the new velocities after collision
      const newSpeedX1 = v2 * Math.cos(angle2 - collisionAngle) * Math.cos(collisionAngle) + v1 * Math.sin(angle1 - collisionAngle) * Math.cos(collisionAngle + Math.PI / 2);
      const newSpeedY1 = v2 * Math.cos(angle2 - collisionAngle) * Math.sin(collisionAngle) + v1 * Math.sin(angle1 - collisionAngle) * Math.sin(collisionAngle + Math.PI / 2);
      const newSpeedX2 = v1 * Math.cos(angle1 - collisionAngle) * Math.cos(collisionAngle) + v2 * Math.sin(angle2 - collisionAngle) * Math.cos(collisionAngle + Math.PI / 2);
      const newSpeedY2 = v1 * Math.cos(angle1 - collisionAngle) * Math.sin(collisionAngle) + v2 * Math.sin(angle2 - collisionAngle) * Math.sin(collisionAngle + Math.PI / 2);

      // Update the velocities of the balls
      ball1.speedX = newSpeedX1;
      ball1.speedY = newSpeedY1;
      ball2.speedX = newSpeedX2;
      ball2.speedY = newSpeedY2;
    }
  }

  function update() {
    if (!animationRunning) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    ctx.strokeStyle = "black";
    ctx.lineWidth = 5;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);

    if (balls.length === 0) {
      createBalls(ballCount);
    }

    for (let i = 0; i < balls.length; i++) {
      const ball = balls[i];
      ball.x += ball.speedX;
      ball.y += ball.speedY;

      if (ball.x + ball.radius > N || ball.x - ball.radius < 0) {
        ball.speedX *= -1;
        ball.color = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`;
      }
      if (ball.y + ball.radius > N || ball.y - ball.radius < 0) {
        ball.speedY *= -1;
        ball.color = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`;
      }

      ball.x = Math.max(ball.radius, Math.min(ball.x, N - ball.radius));
      ball.y = Math.max(ball.radius, Math.min(ball.y, N - ball.radius));

      drawCircle(ball);
    }

    // Check for collisions between balls
    for (let i = 0; i < balls.length; i++) {
      for (let j = i + 1; j < balls.length; j++) {
        collide(balls[i], balls[j]);
      }
    }

    animationFrameId = requestAnimationFrame(update);
  }

  document.getElementById("sizeInput").addEventListener("change", () => {
    const newSize = parseInt(document.getElementById("sizeInput").value, 10);
    balls.forEach(ball => ball.radius = newSize);
  });

  document.getElementById("speedInput").addEventListener("change", () => {
    const newSpeed = parseInt(document.getElementById("speedInput").value, 10);
    balls.forEach(ball => {
      ball.speedX = (Math.random() - 0.5) * newSpeed * 2;
      ball.speedY = (Math.random() - 0.5) * newSpeed * 2;
    });
  });

  document.getElementById("ballCountInput").addEventListener("change", () => {
    ballCount = parseInt(document.getElementById("ballCountInput").value, 10);
    createBalls(ballCount);
    if (animationRunning) {
      update();
    }
  });

  const stopPlayButton = document.getElementById("stopPlayButton");
  stopPlayButton.addEventListener("click", () => {
    if (animationRunning) {
      cancelAnimationFrame(animationFrameId);
      animationRunning = false;
      stopPlayButton.textContent = "Play";
      stopPlayButton.classList.remove("stop");
      stopPlayButton.classList.add("play");
    } else {
      update();
      animationRunning = true;
      stopPlayButton.textContent = "Stop";
      stopPlayButton.classList.remove("play");
      stopPlayButton.classList.add("stop");
    }
  });

  document.getElementById("resetButton").addEventListener("click", () => {
    createBalls(ballCount);
    update();
    animationRunning = true;
    stopPlayButton.textContent = "Stop";
    stopPlayButton.classList.remove("play");
    stopPlayButton.classList.add("stop");
  });

  createBalls(ballCount);
  update();
</script>
</body>
</html>
